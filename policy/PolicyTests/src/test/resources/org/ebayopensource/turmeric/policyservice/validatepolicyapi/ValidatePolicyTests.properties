###############################################################################
# Copyright (c) 2006-2010 eBay Inc. All Rights Reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
###############################################################################


# This file consists test data for validate policy api 
# PolicyInfo  = PolicyType:PolicyName:PolicyDesc,
# Resource = resourcetype:resourcename
# Subject, SubjectGroup
# effectdata = effect,duration, rollOverPeriod,
# ruleCondition
# The response format is --> AckValue|errormessage|validateStatus(boolean)
 
# Pre-Request subjects, subjectgroups and resources 
testcase.prerequisite.subjects =IP:111.111.112.112
testcase.prerequisite.resources =SERVICE:Test_Service_01:TestOp1:TestOp2
 
# Request for Validate Policy of Type RateLiming(RL)
testcase0.name = Validate Policy of Type RateLiming(RL)
testcase0.request.policyInfo = RL:Test_RL_policy_01:testing validatepolicy api
testcase0.request.resources = SERVICE:Test_Service_01
testcase0.request.includeSubjects = IP:111.111.111.199
testcase0.request.policyEffect = Flag:60000:60000
testcase0.request.rulecondition = test rule:Test_Service_01.count > 1500
testcase0.request.querycondition = ValidateRule:YES
testcase0.response = Success|null|true

#Request for Validate Policy of Type RateLiming(RL) without query condition
testcase1.name = Validate Policy of Type RateLiming(RL) without query condition
testcase1.request.policyInfo = RL:Test_RL_policy_01:testing validatepolicy api
testcase1.request.resources = SERVICE:Test_Service_01
testcase1.request.includeSubjects = IP:111.111.112.112
testcase1.request.policyEffect = Flag:60000:60000
testcase1.request.rulecondition = test rule:Test_Service_01.count > 1500
testcase1.response = Failure|Invalid input : please input policy and scope|false

#Request for Validate Policy of Type RateLiming(RL) where rule is invalid
testcase2.name = Validate Policy of Type RateLiming(RL) where rule is invalid
testcase2.request.policyInfo = RL:Test_RL_policy_01:testing validatepolicy api
testcase2.request.resources = SERVICE:Test_Service_01
testcase2.request.includeSubjects = IP:111.111.112.112
testcase2.request.policyEffect = Flag:60000:60000
testcase2.request.rulecondition = test rule:Test_Service_01.count > abcdef
testcase2.request.querycondition = ValidateRule:YES
testcase2.response = Failure| Invalid input : RULE |false

#Request for Validate Policy of Type RateLiming(RL) with invalid query condition
testcase3.name = Validate Policy of Type RateLiming(RL) with invalid query condition
testcase3.request.policyInfo = RL:Test_RL_policy_01:testing validatepolicy api
testcase3.request.resources = SERVICE:Test_Service_01
testcase3.request.includeSubjects = IP:111.111.112.112
testcase3.request.policyEffect = Flag:60000:60000
testcase3.request.querycondition = ValidateRLRule:YES
testcase3.request.rulecondition = test rule:Test_Service_01.count > 1234
testcase3.response = Failure| Invalid input : QUERY|false

#Request for Validate Policy of Type RateLiming(RL) with invalid value for query condition
testcase4.name = Validate Policy of Type RateLiming(RL) with invalid value for query condition
testcase4.request.policyInfo = RL:Test_RL_policy_01:testing validatepolicy api
testcase4.request.resources = SERVICE:Test_Service_01
testcase4.request.includeSubjects = IP:111.111.112.112
testcase4.request.policyEffect = Flag:60000:60000
testcase4.request.querycondition = ValidateRLRule:TRUE
testcase4.request.rulecondition = test rule:Test_Service_01.count > 1234
testcase4.response = Failure| Invalid input : QUERY|false

