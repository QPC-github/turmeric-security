###############################################################################
# Copyright (c) 2006-2010 eBay Inc. All Rights Reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
###############################################################################

#######################################################################################
# This file consists the input data for AuthorizationServiceCacheTestValidation

# There are two formats one for policy creation and other for request/response creation and validation

# Format for policy creation
#resourceMap = comma separated list of resources:operations assigned to the authz policy. FORMAT:- ResourceType:ResourceName:operationName
#policyName = Name of the policy. 
#policyType = Type of the policy (AUTHZ/RL)
#policyDesc = Policy Description 
#subjectInclusion = comma separated list of subjects. FORMAT:- subjectName:SubjectType
#subjectGroupInclusion = comma separated list of subjectgroups and its associated members. 
#                        FORMAT:- SubjectGroupName: SubjectGroupType: (applyEach/applyAll): \n
#                        (if calculated subjectgroup then set 1 / if non-calculated subjectgroup then set 0) : \n
#                        (if calculated then set the name that is associated with the name in CalculatedSubjectGroupConfig.xml file / if non-calculated then the SG is associated with list of subjects(subjectname#subjecttype) separated by &)

# Format for Request/Response creation and validation, the request data for these testcases are to invoke different services with different subjects.
# testcase#.number = please provide the next successive unique number
# testcase#.description = Description of the testcase
# testcase#.policyid = policy on which this testcase relies on
# testcase#.request_admintest_token = OS_TOKEN (This is a hard coded token value to invoke AdminTestItemValidationService)
# testcase#.request_admintest_headervalue = X-EBAY-SOA-SECURITY-TOKEN (This is a hard coded authentication header information required to invoke AdminTestItemValidationService)
# testcase#.request_CalculatorTestService__getSubtraction_subjectlist = (comma seperated list of subjects to invoke CalculatorTestService \n
#                                             and operation getSubtraction) Format is  Subjecttype:Subject Name
# testcase#.request_AdminTestItemService_addItem_subjectlist = (comma seperated list of subjects to invoke AdminTestItemValidationService \n
#                                             and operation is addItem) Format is  Subjecttype:Subject Name
# testcase#.request_Service2__getHeaders_subjectlist =(comma seperated list of subjects to invoke Service2 \n
#                                             and operation is getHeaders) Format is  Subjecttype:Subject Name
# testcase#.request_SecurityItemManage__securityPlaceOffer_subjectlist = (comma seperated list of subjects to invoke SecurityItemManage \n
#                                             and operation is securityPlaceOffer) Format is  Subjecttype:Subject Name
# testcase#.request_test1ext_customError2_subjectlist =(comma seperated list of subjects to invoke test1ext \n
#                                             and operation is customError2) Format is  Subjecttype:Subject Name
# testcase#.request_test1ext_myTestOperation_subjectlist = (comma seperated list of subjects to invoke test1ext \n
#                                             and operation is myTestOperation) Format is  Subjecttype:Subject Name
# testcase#.request_SGInclusion = SG details to assign to policy. Format refer to subjectGroupInclusion format in policy creation.
# testcase#.request_removeSubFromSG = The subject defined here is to delete the subject from SG. Format is  Subjecttype:Subject Name
 
#######################################################################################

#Policy for authzAdminPolicy1
resourceMap_policy1 = SERVICE:AdminTestItemValidation:getAuthzCacheKeys,SERVICE:AdminTestItemValidation:addItem
policyName_policy1 = AdminTestItemValidation_Authz_OS
policyType_policy1 = AUTHZ
policyDesc_policy1 = Test to validate if subject is authorized 
subjectInclusion_policy1 = adminauthztest1:USER,adminbltest1:USER,adminwltest1:USER
subjectGroupInclusion_policy1 = AdminTestItemV_SG1_OS:USER:SG needed for Authz unit tests:applyEach:0:adminauthztest2#USER&apitest1#USER

#Policy for authzCalculatorPolicy2
resourceMap_policy2 = SERVICE:CalculatorTestService:getSubtraction
policyName_policy2 = CalculatorTestService_Authz_OS
policyType_policy2 = AUTHZ
policyDesc_policy2 = Test to validate if subject is authorized 
subjectInclusion_policy2 = rlcalcsvctest1:USER,test5:USER,bzapi:APP

#Policy for authzItemManagePolicy3
resourceMap_policy3 = SERVICE:SecurityItemManage:securityPlaceOffer
policyName_policy3 = Security_BuyerPlaceOfferRole_OS
policyType_policy3 = AUTHZ
policyDesc_policy3 = Test to validate if subject is authorized 
subjectInclusion_policy3 = AnonymousUser:USER
subjectGroupInclusion_policy3 = Security_UserBuyerGroup_OS:USER:SG needed for Authz unit tests:applyEach:0:AnonymousUser#USER

#Policy for authzservice2Policy4
resourceMap_policy4 = SERVICE:Service2:getHeaders
policyName_policy4 = Role2_OS
policyType_policy4 = AUTHZ
policyDesc_policy4 = Test to validate if subject is authorized
subjectInclusion_policy4 = SGMembership_user3:USER 
subjectGroupInclusion_policy4 = Security_DevIDGroup_OS:DEV:SG needed for Authz unit tests:applyEach:0:DocDevName#DEV&FM4FAIMdev#DEV&Admintest1#DEV,\
DevIDGroup_OS:DEV:SG needed for Authz unit tests:applyEach:0:DocDevName#DEV&FM4FAIMdev#DEV&Admintest1#DEV

#Policy for authzservice2Policy5
resourceMap_policy5 = SERVICE:Service2:getHeaders
policyName_policy5 = CalcSG1_OS2
policyType_policy5 = AUTHZ
policyDesc_policy5 = Test to validate if subject is authorized 
subjectGroupInclusion_policy5 = CalcSG1_OS:USER:SG needed for Authz unit tests:applyEach:1:CalcSG1_Test

#Policy for authzItemManagePolicy6
resourceMap_policy6 = SERVICE:SecurityItemManage:securityPlaceOffer,SERVICE:SecurityItemManage:securityGetSellerOfItem,SERVICE:SecurityItemManage:securityListAvailableItems
policyName_policy6 = Security_BuyerRole_OS2
policyType_policy6 = AUTHZ
policyDesc_policy6 = Test to validate if subject is authorized 
subjectInclusion_policy6 = SecApp:APP
subjectGroupInclusion_policy6 = Security_DevIDGroup_OS:DEV:SG needed for Authz unit tests:applyEach:0:DocDevName#DEV&FM4FAIMdev#DEV&Admintest1#DEV


#Request for testValidation_poke
testcase1.number = 1 
testcase1.description = test authorization with cache hits validation
testcase1.policyid = policy1,policy2,policy3,policy4
testcase1.request_admintest_token = OS_TOKEN
testcase1.request_admintest_headervalue = X-TURMERIC-SECURITY-TOKEN
testcase1.request_CalculatorTestService__getSubtraction_subjectlist = USER:rlcalcsvctest1
testcase1.request_AdminTestItemService_addItem_subjectlist = USER:adminwltest1


#Request for testValidation_poke
testcase2.number = 2 
testcase2.description = test authorization with poke functionality
testcase2.policyid = policy1,policy2,policy3,policy4
testcase2.request_admintest_token = OS_TOKEN
testcase2.request_admintest_headervalue = X-TURMERIC-SECURITY-TOKEN
testcase2.request_CalculatorTestService__getSubtraction_subjectlist = USER:rlcalcsvctest1
testcase2.request_AdminTestItemService_addItem_subjectlist = USER:adminwltest1


#Request for testValidation_sg
testcase3.number = 3
testcase3.description = test sg cache creation during authz validation.
testcase3.policyid = policy1,policy4,policy5,policy6,policy3
testcase3.request_admintest_token = OS_TOKEN 
testcase3.request_admintest_headervalue = X-TURMERIC-SECURITY-TOKEN
testcase3.request_Service2__getHeaders_subjectlist = USER:SGMembership_user3
testcase3.request_AdminTestItemService_addItem_subjectlist = USER:adminwltest1
testcase3.request_SecurityItemManage__securityPlaceOffer_subjectlist = DEV:Admintest1


#Request for testValidation_sg
testcase4.number = 4
testcase4.description = test sg cache hits after poking
testcase4.policyid = policy1,policy4,policy5,policy6,policy3
testcase4.request_admintest_token = OS_TOKEN
testcase4.request_admintest_headervalue = X-TURMERIC-SECURITY-TOKEN
testcase4.request_AdminTestItemService_addItem_subjectlist = USER:adminwltest1
testcase4.request_SecurityItemManage__securityPlaceOffer_subjectlist = DEV:Admintest1

#Request for testValidation_userNotAuthz
testcase5.number = 5
testcase5.description = test user is not authorized
testcase5.policyid = policy6,policy3
testcase5.request_SecurityItemManage_securityPlaceOffer_subjectlist = DEV:DocDevName_invalid

#Request for testValidation_userNotAuthz_validateCache
testcase6.number = 6
testcase6.description = test user is not authorized and validate cache hits
testcase6.policyid = policy1,policy4,policy5,policy6,policy3
testcase6.request_admintest_token = OS_TOKEN
testcase6.request_admintest_headervalue = X-TURMERIC-SECURITY-TOKEN
testcase6.request_SecurityItemManage__securityPlaceOffer_subjectlist = DEV:Admintest1

#Request for testValidation_userNotAuthz_validateCacheHits
testcase7.number = 7
testcase7.description = test user is not authorized and validate exception
testcase7.policyid = policy1,policy4,policy5,policy6,policy3
testcase7.request_admintest_token = UNAUTHZ_TOKEN 
testcase7.request_admintest_headervalue = X-TURMERIC-SECURITY-TOKEN

#Request for updateInvokedPolicy_noImpact
testcase8.number = 8
testcase8.description = create policy and assign SG. Then update policy by removing a subject from SG and this will have no impact as the cache is not poked. 
testcase8.policyid = 
testcase8.request_admintest_token = OS_TOKEN
testcase8.request_admintest_headervalue = X-TURMERIC-SECURITY-TOKEN
testcase8.request_test1ext_customError2_subjectlist = USER:soasec_user1_test
testcase8.request_AdminTestItemService_addItem_subjectlist = USER:adminwltest1
testcase8.request_test1ext_myTestOperation_subjectlist = USER:soasec_user1_test
testcase8.request_SGInclusion = SURYA_UserIDGroup_CacheTEST:USER:null:null:0:soasec_user1_test#USER&soasec_user3_test#USER
testcase8.request_removeSubFromSG = USER:soasec_user1_test