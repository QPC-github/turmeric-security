###############################################################################
# Copyright (c) 2006-2010 eBay Inc. All Rights Reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
###############################################################################

#######################################################################################
# This file consists the input data for FunctionalAuthzTests

# Format for policy creation
#resourceMap = comma separated list of resources:operations assigned to the authz policy. FORMAT:- ResourceType:ResourceName:operationName
#policyName = Name of the policy. 
#policyType = Type of the policy (AUTHZ/RL)
#policyDesc = Policy Description 
#subjectInclusion = comma separated list of subjects. FORMAT:- subjectName:SubjectType
#subjectGroupInclusion = comma separated list of subjectgroups and its associated members. 
#                        FORMAT:- SubjectGroupName: SubjectGroupType: (applyEach/applyAll): \n
#                        (if calculated subjectgroup then set 1 / if non-calculated subjectgroup then set 0) : \n
#                        (if calculated then set the name that is associated with the name in CalculatedSubjectGroupConfig.xml file / if non-calculated then the SG is associated with list of subjects(subjectname#subjecttype) separated by &)
 
#######################################################################################

#Policy for authzAdminPolicy1
resourceMap_policy0 = SERVICE:AdminTestItemValidation:getAuthzCacheKeys,SERVICE:AdminTestItemValidation:addItem
policyName_policy0 = AdminTestItemValidation_Authz_OS
policyType_policy0 = AUTHZ
policyDesc_policy0 = Test to validate if subject is authorized 
subjectInclusion_policy0 = adminauthztest1:USER,adminbltest1:USER,adminwltest1:USER
subjectGroupInclusion_policy0 = AdminTestItemV_SG1_OS:USER:SG needed for Authz unit tests:applyEach:0:adminauthztest2#USER&apitest1#USER

#Test when user is not authorized
testcase1.authn_header = X-TURMERIC-SECURITY-TOKEN
testcase1.authn_value = UNAUTHZ_TOKEN

#Test when user is authorized
testcase2.authn_header = X-TURMERIC-SECURITY-TOKEN
testcase2.authn_value = OS_TOKEN


