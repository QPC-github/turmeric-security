###############################################################################
# Copyright (c) 2006-2010 eBay Inc. All Rights Reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
###############################################################################

#######################################################################################
# This file consists the input data for AuthorizationServiceTests

# There are two formats one for policy creation and other for request/response creation and validation

# Format for policy creation
#resourceMap = comma separated list of resources:operations assigned to the authz policy. FORMAT:- ResourceType:ResourceName:operationName
#policyName = Name of the policy. 
#policyType = Type of the policy (AUTHZ/RL)
#policyDesc = Policy Description 
#subjectInclusion = comma separated list of subjects. FORMAT:- subjectName:SubjectType
#subjectGroupInclusion = comma separated list of subjectgroups and its associated members. 
#                        FORMAT:- SubjectGroupName: SubjectGroupType: (applyEach/applyAll): \n
#                        (if calculated subjectgroup then set 1 / if non-calculated subjectgroup then set 0) : \n
#                        (if calculated then set the name that is associated with the name in CalculatedSubjectGroupConfig.xml file / if non-calculated then the SG is associated with list of subjects(subjectname#subjecttype) separated by &)

# Format for Request/Response creation and validation
# testcase#.number = please provide the next successive unique number
# testcase#.description = Description of the testcase
# testcase#.policyid = policy on which this testcase relies on
# testcase#.request_resourceName = resourceName
# testcase#.request_resourceType = resourceType
# testcase#.request_operationName = operation Name
# testcase#.request_subjects = comma seperated list of subjects, Format is subjectname:subjecttype 
# testcase#.response_ackvalue = SUCCESS/FAILURE
 
#######################################################################################

# total_testcases - This is optional parameter and is currently ignored, even if this is not provided the tests will loop through all testcases 
total_testcases = 25
# test_to_debug - This is optional parameter, will be useful when you want to debug specific testcases, format is comma seperated list of testcase numbers
test_to_debug = 

##Create Policy - policy1
#resourceMap_policy0 = SERVICE:itemManage:addItem,SERVICE:itemManage:getAllItems,SERVICE:itemManage:getBuyerOfItem
#policyName_policy0 = SellerRole_OS
#policyType_policy0 = AUTHZ
#policyDesc_policy0 = Test to validate if subject is authorized 
#subjectInclusion_policy0 = apitest11:USER,192.200.222.120/8:IP,200.200.200.200:IP,200.100.200.100:IP
#subjectGroupInclusion_policy0 = Security_DevIDGroup_OS:DEV:SG needed for Authz unit tests:applyEach:0:DocDevName#DEV&FM4FAIMdev#DEV,\
#USERIDGroup_OS:USER:SG needed for Authz testing:applyEach:0:apitest1#USER


#Create Policy - policy1
resourceMap_policy1 = SERVICE:itemManage:addItem,SERVICE:itemManage:getAllItems,SERVICE:itemManage:getBuyerOfItem
policyName_policy1 = SellerRole_OS
policyType_policy1 = AUTHZ
policyDesc_policy1 = Test to validate if subject is authorized 
subjectInclusion_policy1 = apitest11:USER
subjectGroupInclusion_policy1 = Security_DevIDGroup_OS:DEV:SG needed for Authz unit tests:applyEach:0:DocDevName#DEV&FM4FAIMdev#DEV,\
USERIDGroup_OS:USER:SG needed for Authz testing:applyEach:0:apitest1#USER

#Request for P1
testcase0.number = 0
testcase0.description = testAuthorize_userIsAuthorized
testcase0.policyid = policy1
testcase0.request_resourceName = itemManage
testcase0.request_resourceType = SERVICE
testcase0.request_operationName = addItem
testcase0.request_subjects = apitest11:USER
testcase0.response_ackvalue = SUCCESS

#Request for P2
testcase1.number = 1
testcase1.description = testAuthorize_IPIsAuthorized
testcase1.policyid = policy1
testcase1.request_resourceName = itemManage
testcase1.request_resourceType = SERVICE
testcase1.request_operationName = addItem
testcase1.request_subjects = 200.200.200.200:IP
testcase1.response_ackvalue = SUCCESS

#Request for P3
testcase2.number = 2
testcase2.description = testAuthorize_IPIsNotAuthorized
testcase2.policyid = policy1
testcase2.request_resourceName = itemManage
testcase2.request_resourceType = SERVICE
testcase2.request_operationName = addItem
testcase2.request_subjects = 201.200.200.200:IP
testcase2.response_ackvalue = FAILURE

#Request for P4
testcase3.number = 3 
testcase3.description = testAuthorize_IPIsAuthorized(IPSubrange within the range - IP Subject is defined in DB as 192.200.222.120/8)
testcase3.policyid = policy1
testcase3.request_resourceName = itemManage
testcase3.request_resourceType = SERVICE
testcase3.request_operationName = addItem
testcase3.request_subjects = 192.201.222.121:IP
testcase3.response_ackvalue = SUCCESS

#Request for P5
testcase4.number = 4 
testcase4.description = testAuthorize_IPNotInRangeAuthz(IPSubrange not within the range - IP Subject is defined in DB as 192.200.222.120/8)
testcase4.policyid = policy1
testcase4.request_resourceName = itemManage
testcase4.request_resourceType = SERVICE
testcase4.request_operationName = addItem
testcase4.request_subjects = 100.201.222.120:IP
testcase4.response_ackvalue = FAILURE

#Request for P6
testcase5.number = 5 
testcase5.description = testAuthorize_validProxyAuthz
testcase5.policyid = policy1
testcase5.request_resourceName = itemManage
testcase5.request_resourceType = SERVICE
testcase5.request_operationName = addItem
testcase5.request_subjects = 200.100.200.100:IP
testcase5.response_ackvalue = SUCCESS

#Request for P7
testcase6.number = 6 
testcase6.description = testAuthorize_invalidResourceType
testcase6.policyid = policy1
testcase6.request_resourceName = itemManage
testcase6.request_resourceType = SERVICE_1
testcase6.request_operationName = addItem
testcase6.request_subjects = apitest11:USER
testcase6.response_ackvalue = FAILURE


#Create Policy - policy2
resourceMap_policy2 = SERVICE:itemManage2:getplaceOffer,SERVICE:itemManage2:placeOffer,SERVICE:itemManage2:listAvailableItems,SERVICE:itemManage2:getSellerOfItem
policyName_policy2 = BuyerRole_OS
policyType_policy2 = AUTHZ
policyDesc_policy2 = Test to validate if subject is authorized 
subjectInclusion_policy2 = DocAppName:APP
subjectGroupInclusion_policy2 = Security_DevIDGroup_OS:DEV:SG needed for Authz unit tests:applyEach:0:DocDevName#DEV&FM4FAIMdev#DEV,\
USERIDGroup_OS:USER:SG needed for Authz testing:applyEach:0:apitest1#USER

#Create Policy - policy3
testcaseName_policy3 = testAuthorize_validResourceExistsInTwoDifferentRoles_opnameExistsInBothResources_accessSubjectInFirstRole_positive
resourceMap_policy3 = SERVICE:itemManage2:placeOffer2,SERVICE:itemManage2:placeOffer,SERVICE:itemManage2:listAvailableItems,SERVICE:itemManage2:getSellerOfItem,SERVICE:itemManage7:listAvailableItems
policyName_policy3 = BuyerRole2_OS
policyType_policy3 = AUTHZ
policyDesc_policy3 = Test to validate if subject is authorized 
subjectInclusion_policy3 = DocAppName:USER
subjectGroupInclusion_policy3 = Security_DevIDGroup_OS:DEV:SG needed for Authz unit tests:applyEach:0:DocDevName#DEV&FM4FAIMdev#DEV

#Request for P8
testcase7.number = 7 
testcase7.description = testAuthorize_validResourceExistsInTwoDifferentRoles_opnameExistsInBothResources_accessSubjectInFirstRole_positive \
<resource,opname> exists  two different roles - BuyerRole_OS and BuyerRole2_OS. Subject is assigned to BuyerRole_OS role.
testcase7.policyid = policy2,policy3
testcase7.request_resourceName = itemManage2
testcase7.request_resourceType = SERVICE
testcase7.request_operationName = listAvailableItems
testcase7.request_subjects = DocAppName:APP
testcase7.response_ackvalue = SUCCESS


#Request for P9
testcase8.number = 8
testcase8.description = testAuthorize_validResourceExistsInTwoDifferentRoles_opnameExistsInBothResources_accessSubjectInSGInFirstRole_negative \
same <resource,opname> exists  two different roles - BuyerRole_OS and BuyerRole2_OS.Subject is not assigned nor associated with SGs assigned to these roles.
testcase8.policyid = policy2,policy3
testcase8.request_resourceName = itemManage2
testcase8.request_resourceType = SERVICE
testcase8.request_operationName = listAvailableItems
testcase8.request_subjects = apitest1:APP
testcase8.response_ackvalue = FAILURE

#Request for P10
testcase9.number = 9 
testcase9.description = testAuthorize_validResourceExistsInTwoDifferentRoles_opnameExistsInBothResources_accessSubjectInSecondRole_positive \
same <resource,opname> exists  two different roles - BuyerRole_OS and BuyerRole2_OS. Subject is assigned to BuyerRole_OS2 role.
testcase9.policyid = policy2,policy3
testcase9.request_resourceName = itemManage2
testcase9.request_resourceType = SERVICE
testcase9.request_operationName = listAvailableItems
testcase9.request_subjects = DocAppName:USER
testcase9.response_ackvalue = SUCCESS

#Request for P11
testcase10.number = 10 
testcase10.description = testAuthorize_validResourceExistsInTwoDifferentRoles_opnameExistsInSecondRole_accessSubjectInSecondRole_positive \
same resourcename exists  two different roles - BuyerRole_OS and BuyerRole2_OS, Opname and subject are associated to BuyerRole2_OS role.
testcase10.policyid = policy2,policy3
testcase10.request_resourceName = itemManage2
testcase10.request_resourceType = SERVICE
testcase10.request_operationName = placeOffer2
testcase10.request_subjects = DocAppName:USER
testcase10.response_ackvalue = SUCCESS

#Request for P12
testcase11.number = 11 
testcase11.description = testAuthorize_validResourceExistsInTwoDifferentRoles_opnameExistsInFirstRole_accessSubjectInFirstRole_positive \
same resourcename exists  two different roles - BuyerRole_OS and BuyerRole2_OS, Opname and subject are associated to BuyerRole_OS role.
testcase11.policyid = policy2,policy3
testcase11.request_resourceName = itemManage2
testcase11.request_resourceType = SERVICE
testcase11.request_operationName = getplaceOffer
testcase11.request_subjects = DocAppName:APP
testcase11.response_ackvalue = SUCCESS

#Request for P13
testcase12.number = 12 
testcase12.description = testAuthorize_validResourceExistsInTwoDifferentRoles_opnameExistsInFirstRole_accessSubjectInSecondRole_negative \
same resourcename exists  two different roles - BuyerRole_OS and BuyerRole2_OS, Opname exists in BuyerRole_OS  role and subject exists in BuyerRole2_OS role.
testcase12.policyid = policy2,policy3
testcase12.request_resourceName = itemManage2
testcase12.request_resourceType = SERVICE
testcase12.request_operationName = getplaceOffer
testcase12.request_subjects = DocAppName:USER
testcase12.response_ackvalue = FAILURE

#Request for P14
testcase13.number = 13 
testcase13.description = testAuthorize_validResourceExistsInTwoDifferentRoles_opnameExistsInSecondRole_accessSubjectInFirstRole_negative \
same resourcename exists  two different roles - BuyerRole_OS and BuyerRole2_OS, Opname exists in BuyerRole2_OS  role and subject exists in BuyerRole_OS role.
testcase13.policyid = policy2,policy3
testcase13.request_resourceName = itemManage2
testcase13.request_resourceType = SERVICE
testcase13.request_operationName = placeOffer2
testcase13.request_subjects = DocAppName:APP
testcase13.response_ackvalue = FAILURE

#Request for P15
testcase14.number = 14
testcase14.description = testAuthorize_validResourceExists_accessResourceInRole_accessSubjectInSecondRole_positive \
resourcename and opname exists only in one role - BuyerRole2_OS, and subject exists in BuyerRole_OS role.
testcase14.policyid = policy2,policy3
testcase14.request_resourceName = itemManage7
testcase14.request_resourceType = SERVICE
testcase14.request_operationName = listAvailableItems
testcase14.request_subjects = DocAppName:USER
testcase14.response_ackvalue = SUCCESS

#Request for P16
testcase15.number = 15 
testcase15.description = testAuthorize_validResourceExists_accessResourceInRole_accessSubjectInFirstRole_negative \
resourcename and opname exists only in one role - BuyerRole2_OS, and subject does not exist in BuyerRole_OS role.
testcase15.policyid = policy2,policy3
testcase15.request_resourceName = itemManage7
testcase15.request_resourceType = SERVICE
testcase15.request_operationName = listAvailableItems
testcase15.request_subjects = DocAppName:APP
testcase15.response_ackvalue = FAILURE

#Create Policy - policy4, no subjects are assigned to SG that is associated with this policy
resourceMap_policy4 = SERVICE:itemManage4:updatePrice
policyName_policy4 = ModifierRole_OS
policyType_policy4 = AUTHZ
policyDesc_policy4 = Test to validate if subject is authorized 
subjectGroupInclusion_policy4 = Security_InvalidAppGroup_OS:APP:SG needed for Authz unit tests:applyEach:0

#Request for P17
testcase16.number = 16
testcase16.description = testAuthorize_roleExists_emptySG
testcase16.policyid = policy4
testcase16.request_resourceName = itemManage4
testcase16.request_resourceType = SERVICE
testcase16.request_operationName = updatePrice
testcase16.request_subjects = DocDevName:DEV
testcase16.response_ackvalue = FAILURE

#Create Policy - policy5, no subjects are assigned to SG that is associated with this policy
resourceMap_policy5 = SERVICE:Service1:getHeaders
policyName_policy5 = Role1_OS
policyType_policy5 = AUTHZ
policyDesc_policy5 = Test to validate if subject is authorized 
subjectGroupInclusion_p5 = 	NonExistingGroup_OS:APP:SG needed for Authz unit tests:applyEach:0


#Create Policy - policy6
resourceMap_policy6 = SERVICE:Service2:getHeaders
policyName_policy6 = Role2_OS
policyType_policy6 = AUTHZ
policyDesc_policy6 = Test to validate if subject is authorized 
subjectGroupInclusion_policy6 = DevIDGroup_OS:DEV:SG needed for Authz unit tests:applyEach:0:DocDevName#DEV&FM4FAIMdev#DEV

#Create Policy - policy7, calculated SG assigned to this policy
resourceMap_policy7 = SERVICE:Service2:getHeaders
policyName_policy7 = CalcSG1_OS
policyType_policy7 = AUTHZ
policyDesc_policy7 = Test to validate if subject is authorized 
subjectGroupInclusion_policy7 = CalcSG1_OS:USER:SG needed for Authz unit tests:applyEach:1:CalcSG1_Test

#Request for P18
testcase17.number = 17 
testcase17.description = testAuthorize_roleExists_subjectExistsInSG(DevIDGroup_OS)
testcase17.policyid = policy6,policy7
testcase17.request_resourceName = Service2
testcase17.request_resourceType = SERVICE
testcase17.request_operationName = getHeaders
testcase17.request_subjects = FM4FAIMdev:DEV
testcase17.response_ackvalue = SUCCESS

#Request for P19
testcase18.number = 18
testcase18.description = testAuthorize_nonMatchingResource_nonMatchingOpname
testcase18.policyid = policy6,7
testcase18.request_resourceName = ServiceInvalid
testcase18.request_resourceType = SERVICE
testcase18.request_operationName = getInvalid
testcase18.request_subjects = FM4FAIMdev:DEV
testcase18.response_ackvalue = FAILURE

#Request for P20
testcase19.number = 19 
testcase19.description = testAuthorize_nonMatchingResource_existingOpname
testcase19.policyid = policy6,policy7
testcase19.request_resourceName = ServiceInvalid
testcase19.request_resourceType = SERVICE
testcase19.request_operationName = addItem
testcase19.request_subjects = FM4FAIMdev:DEV
testcase19.response_ackvalue = FAILURE

#Request for P21
testcase20.number = 20 
testcase20.description = testAuthorize_subjectExistsInSGFunction
testcase20.policyid = policy6,policy7
testcase20.request_resourceName = Service2
testcase20.request_resourceType = SERVICE
testcase20.request_operationName = getHeaders
testcase20.request_subjects = SGMembership_user3:USER
testcase20.response_ackvalue = SUCCESS

#Request for P22
testcase21.number = 21
testcase21.description = testAuthorize_subjectNotExistsInSGFunction
testcase21.policyid = policy6,policy7
testcase21.request_resourceName = Service2
testcase21.request_resourceType = SERVICE
testcase21.request_operationName = getHeaders
testcase21.request_subjects = CalcSG_InvalidUser:USER
testcase21.response_ackvalue = FAILURE

#Request for P23
testcase22.number = 22
testcase22.description = testIsMemberOf_nonMatchingSubjectDomainWithSGDomain. \
Subject name that is provided matches with Subject in SG.But the domain is different.
testcase22.policyid = policy1
testcase22.request_resourceName = itemManage
testcase22.request_resourceType = SERVICE
testcase22.request_operationName = addItem
testcase22.request_subjects = apitest11:DEV
testcase22.response_ackvalue = FAILURE

#Create Policy - policy8, the calculated SG doesn't have the corresponding impl class to be loaded.
resourceMap_policy8 = SERVICE:testService3:modifyPrice1
policyName_policy8 = Role6_OS
policyType_policy8 = AUTHZ
policyDesc_policy8 = Test to validate if subject is authorized 
subjectGroupInclusion_policy8 = CalcSG_InvalidImplDef_2_OS:USER:SG needed for Authz unit tests:applyEach:1:CalcSG_InvalidImplDef_2

#Request for P24
testcase23.number = 23 
testcase23.description = testAuthorize_definitionOfCalculatedSGExistsButInvalidImplementation. \
Throws error as the calculated SG is not implementing BaseCalculatedSubjectGroup.
testcase23.policyid = policy8
testcase23.request_resourceName = testService3
testcase23.request_resourceType = SERVICE
testcase23.request_operationName = modifyPrice1
testcase23.request_subjects = CalcSG_User1:USER
testcase23.response_ackvalue = FAILURE

# Create RL policy - policy9
resourceMap_policy9 = SERVICE:RLResource:modifyPrice1
policyName_policy9 = RoleRL_OS
policyType_policy9 = RL
policyDesc_policy9 = Test to validate if subject is authorized 
duration_policy9 = 3600
rolloverperiod_policy9 = 86400
effect_policy9 = FLAG
condition_policy9 = RLResource:modifyPrice1.sum_long>5
subjectInclusion_policy9 = apitest11:USER

#Request for P25
testcase24.number = 24 
testcase24.description = No Authz role exists. So will not succeed
testcase24.policyid = policy9
testcase24.request_resourceName = RLResource
testcase24.request_resourceType = SERVICE
testcase24.request_operationName = modifyPrice1
testcase24.request_subjects = apitest11:USER
testcase24.response_ackvalue = FAILURE
