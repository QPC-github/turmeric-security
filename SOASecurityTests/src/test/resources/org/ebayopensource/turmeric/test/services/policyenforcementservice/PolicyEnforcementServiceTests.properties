###############################################################################
# Copyright (c) 2006-2010 eBay Inc. All Rights Reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
###############################################################################
#######################################################################################
# This file consists the input data for PolicyEnforcementServiceTests

# There are two formats one for policy creation and other for request/response creation and validation

# Format for policy creation
#resourceMap = comma separated list of resources:operations assigned to the authz policy. FORMAT:- ResourceType:ResourceName:operationName
#policyName = Name of the policy. 
#policyType = Type of the policy (AUTHZ/RL)
#policyDesc = Policy Description 
#subjectInclusion = comma separated list of subjects. FORMAT:- subjectName:SubjectType
#subjectGroupInclusion = comma separated list of subjectgroups and its associated members. 
#                        FORMAT:- SubjectGroupName: SubjectGroupType: (applyEach/applyAll): \n
#                        (if calculated subjectgroup then set 1 / if non-calculated subjectgroup then set 0) : \n
#                        (if calculated then set the name that is associated with the name in CalculatedSubjectGroupConfig.xml file / if non-calculated then the SG is associated with list of subjects(subjectname#subjecttype) separated by &)

# Format for Request/Response creation and validation
# testcase#.number = please provide the next successive unique number
# testcase#.description = Description of the testcase
# testcase#.policyid = policy on which this testcase relies on
# testcase#.request_resourceName = resourceName
# testcase#.request_resourceType = resourceType
# testcase#.request_operationName = operation Name
# testcase#.request_policytypes = AUTHN and/or AUTHZ and/or RL
# testcase#.request_credential = type of authentication (optional)
# testcase#.request_credentialsubjects = subject to be authenticated for the specified creadential type in request_credential (optional)
# testcase#.request_additionalcredential_namevalue = (optional) more credentials can be provided for authentication, Format is authenticationtype:value to be authenticated
# testcase#.request_subjects = subject to be authorized or ratelimited , Format is SubjectName:SujectType
# testcase#.response_AckValue = SUCCESS/FAILURE
 
#######################################################################################

# total_testcases - This is optional parameter and is currently ignored, even if this is not provided the tests will loop through all testcases 
total_testcases = 4
# test_to_debug - This is optional parameter, will be useful when you want to debug specific testcases, format is comma seperated list of testcase numbers
test_to_debug = 

#Header and corresponding value required for authentication PolicyEnforcementService. This information is required for all the testcases. 
header = X-TURMERIC-SECURITY-TOKEN
value = validtoken

#testcaseName_policy0 = testAuthnAuthzPositiveTest4
#resourceMap_policy0 = SERVICE:PolicyEnforcementService:verifyAccess
#policyName_policy0 = PolicyEnforcementService_Authz_OS
#policyType_policy0 = AUTHZ
#policyDesc_policy0 = authorization policy
#subjectInclusion_policy0 = admin:USER

#Create Authz policy :- CalculatorTestService_Authz_OS
testcaseName_policy1 = testAuthnAuthzPositiveTest4
resourceMap_policy1 = SERVICE:CalculatorTestService:getSubtraction
policyName_policy1 = CalculatorTestService_Authz_OS
policyType_policy1 = AUTHZ
policyDesc_policy1 = authorization policy
subjectInclusion_policy1 = rlcalcsvctest1:USER,test5:USER,bzapi:APP 

#Request for Test
testcase0.number = 0
testcase0.description = Validate Authn invocation via PES 
testcase0.policyid = policy1
testcase0.request_resourceName = CalculatorTestService
testcase0.request_resourceType = SERVICE
testcase0.request_operationName = getSubtraction
testcase0.request_policytypes = AUTHN
testcase0.request_credential = BASIC
testcase0.request_credentialsubjects = rlcalcsvctest1:userid,passwd:password
testcase0.response_AckValue = SUCCESS

#Request for Test
testcase1.number = 1
testcase1.description = Validate Authn,Authz invocation via PES 
testcase1.policyid = policy1
testcase1.request_resourceName = CalculatorTestService
testcase1.request_resourceType = SERVICE
testcase1.request_operationName = getSubtraction
testcase1.request_policytypes = AUTHN
testcase1.request_credential = BASIC
testcase1.request_credentialsubjects = rlcalcsvctest1:userid,passwd:password
testcase1.request_subjects = rlcalcsvctest1:USER
testcase1.response_AckValue = SUCCESS

#Request for Test - Missing Credentials
testcase2.number = 2
testcase2.description = Validate Authz invocation via PES 
testcase2.policyid = policy1
testcase2.request_resourceName = CalculatorTestService
testcase2.request_resourceType = SERVICE
testcase2.request_operationName = getSubtraction
testcase2.request_policytypes = AUTHZ
testcase2.request_credential = BASIC
testcase2.request_credentialsubjects = 
testcase2.request_subjects = rlcalcsvctest1:USER
testcase2.response_AckValue = FAILURE

#Request for Test
testcase3.number = 3
testcase3.description = Validate Authn,Authz invocation via PES and the user is not authorized to access CalculatorTestService:getSubtraction
testcase3.policyid = policy1
testcase3.request_resourceName = CalculatorTestService
testcase3.request_resourceType = SERVICE
testcase3.request_operationName = getSubtraction
testcase3.request_policytypes = AUTHN,AUTHZ
testcase3.request_credential = basic
testcase3.request_credentialsubjects = admintest:USER
testcase3.response_AckValue = FAILURE
#testcase3.response_ErrorMessage = credentials

#Request for Test
#testcase4.number = 4
#testcase4.description = Validate Authn invocation via PES, this test is to validate additional credentials populated in the request  
#testcase4.policyid = policy1
#testcase4.request_resourceName = CalculatorTestService
#testcase4.request_resourceType = SERVICE
#testcase4.request_operationName = getSubtraction
#testcase4.request_policytypes = AUTHN
#testcase4.request_credential = BASIC
#testcase4.request_credentialsubjects = changeme 
#testcase4.request_additionalcredential_namevalue = TYPE:1
#testcase4.response_AckValue = SUCCESS